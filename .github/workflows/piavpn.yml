name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: 'Rumble Video URL'
        required: true
        default: 'https://rumble.com/v6r0vz6-automate.html'

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    
    container:
      # Run inside an ubuntu:latest container with privileges so we can create tun0
      image: ubuntu:latest
      options: --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Basic Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          # Install sudo so we can run "sudo killall openvpn", etc.
          apt-get install -y sudo wget curl unzip openvpn iproute2 dnsutils ca-certificates gnupg psmisc
          
          # Puppeteer shared libraries (but skip ALSA here; we'll do fallback next)
          apt-get install -y \
            fonts-liberation \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libcups2 \
            libdbus-1-3 \
            libexpat1 \
            libfontconfig1 \
            libgbm1 \
            libglib2.0-0 \
            libgtk-3-0 \
            libnss3 \
            libpangocairo-1.0-0 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxrandr2 \
            libxrender1 \
            libxss1 \
            libxtst6 \
            libpulse0 \
            libxkbcommon0 \
            xdg-utils \
            lsb-release

          # Fallback approach for ALSA libraries
          apt-get install -y libasound2 libasound2-plugins || \
          apt-get install -y libasound2t64 libasound2-plugins || \
          echo "Warning: neither libasound2 nor libasound2t64 was installed."

          # Install Node.js 20.x
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      - name: Configure and Start PIA VPN
        env:
          PIA_USERNAME: ${{ secrets.PIA_USERNAME }}
          PIA_PASSWORD: ${{ secrets.PIA_PASSWORD }}
        run: |
          mkdir -p /tmp/pia
          cd /tmp/pia

          echo "Downloading PIA OpenVPN configs..."
          wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
          unzip -q openvpn.zip

          echo "Creating credentials file..."
          echo "$PIA_USERNAME" > auth.txt
          echo "$PIA_PASSWORD" >> auth.txt
          chmod 600 auth.txt

          # Modify us_east.ovpn as an initial config
          SERVER_FILE=us_east.ovpn
          sed -i 's/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/' $SERVER_FILE
          echo 'dhcp-option DNS 8.8.8.8' >> $SERVER_FILE
          echo 'dhcp-option DNS 8.8.4.4' >> $SERVER_FILE

          echo "Starting OpenVPN in the background..."
          sudo openvpn --config $SERVER_FILE --daemon --log /workspace/openvpn.log

          echo "Waiting for VPN interface (tun0)..."
          for i in $(seq 1 12); do
            echo "Attempt $i..."
            if ip a | grep -q tun0; then
              echo "VPN interface detected!"
              # Override DNS resolvers
              echo 'nameserver 8.8.8.8' > /etc/resolv.conf
              echo 'nameserver 8.8.4.4' >> /etc/resolv.conf
              break
            fi
            if [ $i -eq 12 ]; then
              echo "VPN connection failed."
              exit 1
            fi
            sleep 5
          done

          echo "VPN IP: $(curl -s https://api.ipify.org)"

      - name: Install Puppeteer
        run: |
          npm init -y
          npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth
          mkdir -p scripts screenshots logs

      - name: Create Puppeteer Script
        run: |
          cat > scripts/rumble-visit.js << 'EOF'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          const { execSync } = require('child_process');
          const path = require('path');

          puppeteer.use(StealthPlugin());

          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          async function safeScreenshot(page, filename) {
            try {
              await page.screenshot({ path: filename });
              console.log(`Screenshot taken: ${filename}`);
            } catch (err) {
              console.error(`Failed to take screenshot ${filename}: ${err.message}`);
            }
          }

          /**
           * Kills openvpn, picks a random .ovpn from /tmp/pia, reconnects, waits for tun0.
           * Returns true if successful, else false.
           */
          async function reconnectVPN() {
            console.log('Attempting to reconnect PIA VPN with a different server...');
            try {
              // Kill any existing openvpn
              execSync('sudo killall openvpn || true', { stdio: 'inherit' });

              // Randomly pick a .ovpn file from /tmp/pia
              const piaDir = '/tmp/pia';
              const ovpnFiles = fs.readdirSync(piaDir).filter(f => f.endsWith('.ovpn'));
              if (ovpnFiles.length === 0) {
                throw new Error(`No .ovpn files found in ${piaDir}`);
              }

              const randomIndex = Math.floor(Math.random() * ovpnFiles.length);
              const chosenOvpn = ovpnFiles[randomIndex];
              const chosenPath = path.join(piaDir, chosenOvpn);
              console.log(`Randomly selected server config: ${chosenPath}`);

              // Ensure 'auth-user-pass /tmp/pia/auth.txt' is present
              let contents = fs.readFileSync(chosenPath, 'utf8');
              if (!contents.includes('auth-user-pass /tmp/pia/auth.txt')) {
                contents = contents.replace('auth-user-pass', 'auth-user-pass /tmp/pia/auth.txt');
                contents += '\ndhcp-option DNS 8.8.8.8\ndhcp-option DNS 8.8.4.4\n';
                fs.writeFileSync(chosenPath, contents, 'utf8');
              }

              // Start openvpn in the background
              execSync(`sudo openvpn --config "${chosenPath}" --daemon --log /workspace/openvpn_reconnect.log`, { stdio: 'inherit' });

              // Wait for tun0
              let i = 0;
              for (; i < 12; i++) {
                await sleep(5000);
                try {
                  const ifconfig = execSync('ip a').toString();
                  if (ifconfig.includes('tun0')) {
                    console.log('tun0 interface is up!');
                    break;
                  }
                } catch (err) {}
              }
              if (i === 12) {
                throw new Error('VPN reconnect timed out: tun0 not found');
              }

              // Manually set DNS
              execSync('echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf', { stdio: 'inherit' });
              execSync('echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf', { stdio: 'inherit' });

              // Print new IP
              const newIP = execSync('curl -s https://api.ipify.org').toString().trim();
              console.log(`New VPN IP: ${newIP}`);
              return true;
            } catch (err) {
              console.error('Failed to reconnect VPN:', err.message);
              return reconnectVPN();
            }
          }

          async function visitRumble(videoUrl, attempt = 1) {
            console.log(`[Attempt #${attempt}] Launching browser to visit ${videoUrl}...`);
            const browser = await puppeteer.launch({
              headless: 'new',
              executablePath: require('puppeteer').executablePath(),
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
            });

            try {
              const page = await browser.newPage();
              await page.setUserAgent(
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/133.0.0.0 Safari/537.36'
              );
              await page.setCacheEnabled(false);

              console.log('Navigating to Rumble video...');
              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await sleep(3000);
              await safeScreenshot(page, `./screenshots/rumble_landing_${Date.now()}.png`);

              const playButtonSelectors = [
                '.bigPlayUIInner.ctp',
                'button[aria-label="Play"]',
                '.vjs-big-play-button',
                '.icon-play',
                'div[class*=play]'
              ];

              let playButton = null;
              for (const selector of playButtonSelectors) {
                playButton = await page.$(selector);
                if (playButton) {
                  console.log(`Play button found using selector: ${selector}`);
                  await playButton.click();
                  await sleep(3000);
                  await safeScreenshot(page, `./screenshots/rumble_play_clicked_${Date.now()}.png`);
                  break;
                }
              }

              if (!playButton) {
                console.warn('Play button not found. Proceeding without clicking.');
              }

              // Watch for 30s, checking every 5s
              for (let t = 5; t <= 30; t += 5) {
                await sleep(5000);
                await safeScreenshot(page, `./screenshots/rumble_watch_${t}s_${Date.now()}.png`);

                const isPlaying = await page.evaluate(() => {
                  const video = document.querySelector('video');
                  return video && !video.paused && !video.ended && video.readyState > 2;
                });
                console.log(`Video playing status at ${t}s: ${isPlaying}`);

                // If not playing, reconnect + unlimited retry
                if (!isPlaying) {
                  console.log('Video is NOT playing. Reconnecting VPN and retrying...');
                  await browser.close();
                  let reconnected = await reconnectVPN();
                  while (!reconnected) {
                    reconnected = await reconnectVPN();
                    throw new Error('VPN reconnect failed. Retrying.');
                  }
                  // No max attempt limit – just keep recursing
                  return visitRumble(videoUrl, attempt + 1);
                }
              }

              // Save final HTML
              const finalHtml = await page.content();
              fs.writeFileSync(`./logs/final_page_${Date.now()}.html`, finalHtml);
              console.log('Visit completed successfully');
            } catch (err) {
              console.error('Error in visit:', err.message);
              console.log('Detected a navigation error. Restarting loop after reconnecting VPN...');
              await reconnectVPN();
              return visitRumble(videoUrl, attempt + 1);
              throw err;
            } finally {
              await browser.close();
            }
          }

          async function main() {
            try {
              const videoUrl = process.argv[2] || 'https://rumble.com/v6r0vz6-automate.html';
              await visitRumble(videoUrl);
            } catch (error) {
              console.error('Script failed:', error.message);
              process.exit(1);
            }
          }

          main();
          EOF

      - name: Run Puppeteer Script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://rumble.com/v6r0vz6-automate.html' }}"
          echo "Visiting Rumble URL: $VIDEO_URL"
          node scripts/rumble-visit.js "$VIDEO_URL" | tee ./logs/puppeteer.log

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rumble-visit-results
          path: |
            screenshots/*
            logs/*
          retention-days: 7
